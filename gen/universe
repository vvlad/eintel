#!/usr/bin/env ruby

require 'pathname'
require 'erb'

SDE_PATH = Pathname(ARGV.first)

FSD_PATH = SDE_PATH.join('fsd/universe')

EMPTY =  ''.freeze

System = Struct.new(:name, :id)

systems = {}

TEMPLATES = {
  systems: %{package universe
    func init() {
      var system *System

      <% systems.each do |system| %>
        system = &System{Name: "<%= system.name%>", ID: "<%= system.id %>"}
        Systems["<%= system.name %>"] = system
        Systems["<%= system.id %>"] = system
      <% end %>
    }
  }
}.freeze

Dir["#{FSD_PATH}/eve/*/*/*/solarsystem.staticdata"].each do |entry|
  id = File.read(entry).scan(/solarSystemID: (\d+)/).flatten.first
  entry["#{FSD_PATH}/eve/"] = EMPTY
  parts = *entry.split('/')

  system = parts[2]

  systems[system] = System.new(system, id)
end

def render(what, context = {})
  require 'ostruct'
  view = OpenStruct.new(context)
  def view.context
    binding
  end
  buffer = ERB.new(TEMPLATES.fetch(what)).result(view.context)
  open("universe/gen-#{what}.go", "w") do |f|
    f << buffer
  end
end

render(:systems, systems: systems.values)
